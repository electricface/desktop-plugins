// Generated by CoffeeScript 1.6.2
(function() {
  var AudioHelper, DEEPIN_ITEM_ID, Lines, Module, Widget, ajax, apply_animation, apply_flash, apply_rotate, assert, bindtextdomain, build_menu, calc_text_size, clamp, create_element, create_img, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, echo, find_drag_target, get_function_name, get_page_xy, get_path_base, get_path_name, plugin, remove_element, run_post, swap_element, _, _events,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  Array.prototype.remove = function(el) {
    var i;

    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  String.prototype.args = function() {
    var i, len, o, _i;

    o = this;
    len = arguments.length;
    for (i = _i = 1; 1 <= len ? _i <= len : _i >= len; i = 1 <= len ? ++_i : --_i) {
      o = o.replace(new RegExp("%" + i, "g"), arguments[i - 1]);
    }
    return o;
  };

  echo = function(log) {
    return console.log(log);
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s, d) {
    if (d) {
      return DCore.dgettext(d, s);
    } else {
      return DCore.gettext(s);
    }
  };

  bindtextdomain = function(domain, locale_dir) {
    return DCore.bindtextdomain(domain, locale_dir);
  };

  build_menu = function(info) {
    var i, m, sm, v, _i, _len;

    m = new DeepinMenu;
    for (_i = 0, _len = info.length; _i < _len; _i++) {
      v = info[_i];
      if (v.length === 0) {
        i = new DeepinMenuItem(2, 0, 0, 0);
      } else if (typeof v[0] === "number") {
        i = new DeepinMenuItem(0, v[0], v[1], null);
        if (v.length > 2 && v[2] === false) {
          i.enabled = false;
        } else {
          i.enabled = true;
        }
      } else {
        sm = build_menu(v[1]);
        i = new DeepinMenuItem(1, 0, v[0], sm);
      }
      m.appendItem(i);
    }
    return m;
  };

  get_page_xy = function(el, x, y) {
    var p;

    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;

    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = el.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;

    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;

    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(type, clss, parent) {
    var el;

    el = document.createElement(type);
    if (clss) {
      el.setAttribute("class", clss);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(clss, src, parent) {
    var el;

    el = create_element('img', clss, parent);
    el.src = src;
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;

    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = "" + width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

  ajax = function(url, callback, callback_error) {
    var xhr;

    xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.onload = function() {
      echo("XMLHttpRequest onload");
      if (typeof callback === "function") {
        callback(xhr);
      }
    };
    xhr.onerror = function() {
      echo("XMLHttpRequest onerror");
      return typeof callback_error === "function" ? callback_error(xhr) : void 0;
    };
    return xhr.send(null);
  };

  get_path_base = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  get_path_name = function(path) {
    var dot_pos;

    dot_pos = path.lastIndexOf('.');
    if (dot_pos === -1) {
      return path.substring(path.lastIndexOf('/') + 1);
    } else {
      return path.substring(path.lastIndexOf('/') + 1, dot_pos);
    }
  };

  remove_element = function(obj) {
    if (obj) {
      return obj.parentNode.removeChild(obj);
    }
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, value, _ref;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, value, _ref, _ref1;

      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return (_ref1 = obj.__init__) != null ? _ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(_super) {
    __extends(Widget, _super);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, v, _ref,
        _this = this;

      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      if (this.id) {
        el.id = this.id;
        Widget.object_table[this.id] = this;
      }
      this.element = el;
      f_menu = null;
      f_rclick = null;
      _ref = this.constructor.prototype;
      for (k in _ref) {
        v = _ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (__indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          echo("found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      this.element.addEventListener("contextmenu", function(e) {
        if (f_rclick) {
          f_rclick(e);
        }
        if (f_menu) {
          _this.element.contextMenu = build_menu(f_menu());
          return e.stopPropagation();
        }
      });
    }

    Widget.prototype.destroy = function() {
      var _ref;

      if ((_ref = this.element.parentElement) != null) {
        _ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  apply_animation = function(el, name, duration, timefunc) {
    el.style.webkitAnimationName = name;
    el.style.webkitAnimationDuration = duration;
    return el.style.webkitAnimationTimingFunction = timefunc || "linear";
  };

  apply_rotate = function(el, time) {
    var id;

    apply_animation(el, "rotate", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_flash = function(el, time) {
    var id;

    apply_animation(el, "flash", "" + time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  Lines = (function(_super) {
    __extends(Lines, _super);

    function Lines(id) {
      var _widths;

      this.id = id;
      Lines.__super__.constructor.apply(this, arguments);
      this.current_value = 0;
      _widths = [5, 7, 9, 13, 15, 17];
      this.lines = [];
      this.lines.push(this.create_line(_widths[0]));
      this.lines.push(this.create_line(_widths[2]));
      this.lines.push(this.create_line(_widths[1]));
      this.lines.push(this.create_line(_widths[4]));
      this.lines.push(this.create_line(_widths[3]));
      this.lines.push(this.create_line(_widths[4]));
      this.lines.push(this.create_line(_widths[2]));
      this.lines.push(this.create_line(_widths[5]));
      this.lines.push(this.create_line(_widths[3]));
      this.lines.push(this.create_line(_widths[5]));
      this.lines.push(this.create_line(_widths[3]));
      this.lines.push(this.create_line(_widths[1]));
      this.adjust_lines();
    }

    Lines.prototype.adjust_lines = function() {
      var i, l, _i, _len, _ref;

      _ref = this.lines;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        l = _ref[i];
        l.style.opacity = 0.2 + i * 1.0 / this.lines.length;
      }
      return this.lines.reverse();
    };

    Lines.prototype.create_line = function(width) {
      var line;

      line = create_element("div", "line", this.element);
      line.style.width = width;
      return line;
    };

    Lines.prototype.active_line = function(n) {
      if (n > this.lines.length) {
        return;
      }
      this.element.style.display = "block";
      if (n > this.current_value) {
        while (n > this.current_value) {
          this.lines[this.current_value++].style.background = "#c6edff";
        }
      } else if (n < this.current_value) {
        while (n < this.current_value) {
          this.lines[this.current_value--].style.background = "rgba(0,0,0,0)";
        }
      }
      return this.current_value = clamp(n, 0, this.lines.length - 1);
    };

    Lines.prototype.hide = function() {
      return this.element.style.display = "none";
    };

    return Lines;

  })(Widget);

  AudioHelper = (function(_super) {
    __extends(AudioHelper, _super);

    function AudioHelper(id) {
      this.id = id;
      AudioHelper.__super__.constructor.apply(this, arguments);
      this.dbus_init();
      this.circle = create_img("circle", "" + plugin.path + "/circle.png", this.element);
      this.running = create_img("running", "" + plugin.path + "/running.png", this.element);
      this.lighter = create_img("light", "" + plugin.path + "/light.png", this.element);
      this.element.style.background = "url(" + plugin.path + "/static.png)";
      this.lines = new Lines(this.element);
      this.element.appendChild(this.lines.element);
      this._clicked = false;
    }

    AudioHelper.prototype.do_buildmenu = function() {
      return [];
    };

    AudioHelper.prototype.do_mousedown = function(e) {
      if (e.which === 1) {
        return this.circle.src = "" + plugin.path + "/circle_press.png";
      }
    };

    AudioHelper.prototype.do_mouseup = function() {
      return this.circle.src = "" + plugin.path + "/circle.png";
    };

    AudioHelper.prototype.do_click = function(e) {
      this.dbus.speech_record();
      return this.lines.active_line(e.detail - 1);
    };

    AudioHelper.prototype.dbus_init = function() {
      var _this = this;

      try {
        this.dbus = DCore.DBus.session("com.deepin.speech");
        this.dbus.connect("CurrentVolume", function(s) {
          var i;

          i = _this.lines.lines.length * Math.random();
          return _this.lines.active_line(i);
        });
        this.dbus.connect("RecordStart", function() {
          _this.running.style.display = "none";
          return echo("recordstart");
        });
        this.dbus.connect("RecordEnd", function() {
          _this.running.style.display = "none";
          return echo("recordend");
        });
        this.dbus.connect("ParseStart", function() {
          _this.lines.hide();
          _this.lighter.style.display = "none";
          _this.running.style.display = "block";
          return echo("parsestart");
        });
        this.dbus.connect("ParseEnd", function() {
          _this.lines.hide();
          _this.lighter.style.display = "none";
          _this.running.style.display = "none";
          return echo("parseend");
        });
        return this.dbus.connect("ParseError", function() {
          _this.lines.hide();
          _this.lighter.style.display = "none";
          _this.running.style.display = "none";
          return echo("parseerror");
        });
      } catch (_error) {}
    };

    return AudioHelper;

  })(Widget);

  plugin = window.PluginManager.get_plugin("audio_helper");

  plugin.inject_css("audio_helper");

  plugin.wrap_element(new AudioHelper(plugin.id).element);

}).call(this);
